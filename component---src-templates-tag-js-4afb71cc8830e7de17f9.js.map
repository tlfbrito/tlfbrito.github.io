{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/PostsListCard.js","webpack:///./src/components/PostsList.js","webpack:///./src/templates/tag.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","PostsListCard","frontmatter","fields","excerpt","className","dangerouslySetInnerHTML","__html","to","date","PostsList","postEdges","map","node","key","pageQuery","CategoryTemplate","location","pageContext","tag","Layout","allMarkdownRemark","edges"],"mappings":"4KAqBA,SAASA,EAAT,GAAsE,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAqB,IAAfC,YAAe,MAAR,KAAQ,EACnE,OACE,kBAAC,cAAD,CACEC,MAnBK,YAoBLC,OAAQ,SAAAC,GAAS,IACPC,EAAiBD,EAAKE,KAAtBD,aACFE,EAAkBR,GAAeM,EAAaN,YAC9CS,EAAYX,EAAWQ,EAAaI,QAAnB,IAA8BZ,EAAU,KACzDa,EAAG,GAAML,EAAaI,QAAUT,EACtC,OACE,kBAAC,IAAD,eACEW,eAAgB,CAAEV,SACbH,EACD,CACEc,cAAc,QAASP,EAAaP,MACpCA,SAEF,CACEA,MAAUO,EAAaP,MAAlB,oBARb,CAUEF,KAAM,CACJ,CACEiB,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,SACVD,QAASJ,GAEX,CACEK,SAAU,WACVD,QAAShB,GAASO,EAAaP,OAEjC,CACEiB,SAAU,iBACVD,QAASP,GAEX,CACEM,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAST,EAAaW,OAAOC,SAE/B,CACEJ,KAAM,gBACNC,QAAShB,GAASO,EAAaP,OAEjC,CACEe,KAAM,sBACNC,QAASP,IAGVW,OACCV,EACI,CACE,CACEO,SAAU,WACVD,QAASN,GAEX,CACEK,KAAM,gBACNC,QAASN,IAGb,IAELU,OAAOtB,OAlElB,SA0EJD,EAAIwB,aAAe,CACjBvB,KAAM,GACNE,MAAO,GACPE,KAAM,IAWOL,O,4JCvFAyB,EArBO,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtCzB,EAAQuB,EAAYvB,OAASwB,EAAOtB,KAE1C,OACE,6BACE,6BACE,wBAAIwB,UAAU,cAAc1B,GAC5B,yBACE2B,wBAAyB,CACvBC,OAAQL,EAAYtB,aAAewB,KAGvC,kBAAC,OAAD,CAAMI,GAAE,IAAML,EAAOtB,KAAb,IAAsBwB,UAAU,mBAAxC,gBAIF,yBAAKA,UAAU,cAAf,aAAuCH,EAAYO,QCV1CC,EANG,SAAC,GACjB,OADmC,EAAhBC,UACFC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACtB,OAAO,kBAAC,EAAD,eAAeC,IAAKD,EAAKV,OAAOtB,MAAUgC,QCiBxCE,EAAS,aAyBPC,UAxCU,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,YAAajC,EAAW,EAAXA,KACzCkC,EAAQD,EAARC,IACR,OACE,kBAACC,EAAA,EAAD,CAAQH,SAAUA,EAAUtC,MAAK,iBAAmBwC,EAAnB,KAC/B,yBAAKd,UAAU,iBACb,kBAAC7B,EAAA,EAAD,CAAKG,MAAK,iBAAmBwC,EAAnB,MACV,6BACE,oCAAUA,GACV,kBAAC,EAAD,CAAWR,UAAW1B,EAAKoC,kBAAkBC,a","file":"component---src-templates-tag-js-4afb71cc8830e7de17f9.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} — Personal blog`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostsListCard = ({ frontmatter, fields, excerpt }) => {\n  const title = frontmatter.title || fields.slug;\n\n  return (\n    <div>\n      <div>\n        <h2 className=\"card-title\">{title}</h2>\n        <div\n          dangerouslySetInnerHTML={{\n            __html: frontmatter.description || excerpt,\n          }}\n        />\n        <Link to={`/${fields.slug}/`} className=\"btn btn-primary\">\n          Read More &rarr;\n        </Link>\n      </div>\n      <div className=\"text-muted\">Posted on {frontmatter.date}</div>\n    </div>\n  );\n};\n\nexport default PostsListCard;\n","import React from 'react';\nimport PostsListCard from './PostsListCard';\n\nconst PostsList = ({ postEdges }) => {\n  return postEdges.map(({ node }) => {\n    return <PostsListCard key={node.fields.slug} {...node} />;\n  });\n};\n\nexport default PostsList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport PostsList from '../components/PostsList';\n\nconst CategoryTemplate = ({ location, pageContext, data }) => {\n  const { tag } = pageContext;\n  return (\n    <Layout location={location} title={`Posts in tag \"${tag}\"`}>\n      <div className=\"tag-container\">\n        <SEO title={`Posts in tag \"${tag}\"`} />\n        <div>\n          <h1>Tag: {tag}</h1>\n          <PostsList postEdges={data.allMarkdownRemark.edges} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      filter: { fields: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            tags\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n"],"sourceRoot":""}